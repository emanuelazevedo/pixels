{"version":3,"sources":["components/Pixel.js","components/Row.js","components/DrawingPanel.js","components/Editor.js","components/App.js","index.js"],"names":["Pixel","props","selectedColor","useState","pixelColor","setPixelColor","oldColor","setOldColor","canChangeColor","setCanChangeColor","className","onClick","onMouseEnter","onMouseLeave","style","backgroundColor","Row","width","pixels","i","push","DrawingPanel","height","panelRef","useRef","rows","id","ref","exportComponentAsPNG","Editor","panelWidth","setPanelWidth","panelHeight","setPanelHeight","hideOptions","setHideOptions","hideDrawingPanel","setHideDrawingPanel","buttonText","setButtonText","setColor","type","defaultValue","onChange","e","target","value","color","onChangeComplete","hex","App","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iRAGe,SAASA,EAAMC,GAAQ,IAC1BC,EAAkBD,EAAlBC,cADyB,EAGGC,mBAAS,QAHZ,mBAG1BC,EAH0B,KAGdC,EAHc,OAIDF,mBAASC,GAJR,mBAI1BE,EAJ0B,KAIhBC,EAJgB,OAKWJ,oBAAS,GALpB,mBAK1BK,EAL0B,KAKVC,EALU,KAyBjC,OAAO,qBACKC,UAAU,QACVC,QApBZ,WACIN,EAAcH,GACdO,GAAkB,IAmBVG,aAhBZ,WACIL,EAAYH,GACZC,EAAcH,IAeNW,aAZZ,WACOL,GACCH,EAAcC,GAElBG,GAAkB,IASVK,MAAO,CAAEC,gBAAiBX,KC7B3B,SAASY,EAAIf,GAKxB,IALgC,IACxBgB,EAAyBhB,EAAzBgB,MAAOf,EAAkBD,EAAlBC,cAEXgB,EAAS,GAEJC,EAAI,EAAGA,EAAIF,EAAOE,IACvBD,EAAOE,KAAK,cAACpB,EAAD,CAAeE,cAAeA,GAAlBiB,IAG5B,OAAO,qBAAKT,UAAU,MAAf,SAAsBQ,I,YCRlB,SAASG,EAAapB,GAKjC,IALyC,IACjCgB,EAAiChB,EAAjCgB,MAAOK,EAA0BrB,EAA1BqB,OAAQpB,EAAkBD,EAAlBC,cACjBqB,EAAWC,mBACbC,EAAO,GAEFN,EAAI,EAAGA,EAAIG,EAAQH,IACxBM,EAAKL,KAAK,cAACJ,EAAD,CAAaC,MAAOA,EAAOf,cAAeA,GAAhCiB,IAGxB,OACA,sBAAKO,GAAG,eAAR,UACI,qBAAKA,GAAG,SAAQC,IAAKJ,EAArB,SACKE,IAEL,wBAAQd,QAAS,kBAAMiB,+BAAqBL,IAAWb,UAAU,SAAjE,8BCdO,SAASmB,IAAU,IAAD,EACO1B,mBAAS,IADhB,mBACtB2B,EADsB,KACVC,EADU,OAES5B,mBAAS,IAFlB,mBAEtB6B,EAFsB,KAETC,EAFS,OAGS9B,oBAAS,GAHlB,mBAGtB+B,EAHsB,KAGTC,EAHS,OAImBhC,oBAAS,GAJ5B,mBAItBiC,EAJsB,KAIJC,EAJI,OAKOlC,mBAAS,iBALhB,mBAKtBmC,EALsB,KAKVC,EALU,OAMKpC,mBAAS,WANd,mBAMtBD,EANsB,KAMPsC,EANO,KAmB7B,OACI,sBAAKd,GAAG,SAAR,UACI,8CACCU,GAAoB,wDAEpBA,GAAqB,sBAAKV,GAAG,UAAR,UAClB,sBAAKhB,UAAU,SAAf,UACI,uBACI+B,KAAK,SACL/B,UAAU,aACVgC,aAAcZ,EACda,SAAU,SAACC,GACPb,EAAca,EAAEC,OAAOC,UAG/B,4CAEJ,sBAAKpC,UAAU,SAAf,UACI,uBACI+B,KAAK,SACL/B,UAAU,aACVgC,aAAcV,EACdW,SAAU,SAACC,GACPX,EAAeW,EAAEC,OAAOC,UAGhC,gDAIR,wBAAQnC,QAzChB,WACIwB,GAAgBD,GAChBG,GAAqBD,GAEYG,EAAlB,kBAAfD,EAA+C,QAAyB,kBAqC3B5B,UAAU,SAAnD,SACK4B,IAGJJ,GACG,cAAC,IAAD,CAAca,MAAO7C,EAAe8C,iBAvChD,SAAqBD,GACjBP,EAASO,EAAME,QAwCVf,GACD,cAACb,EAAD,CACIJ,MAAOa,EACPR,OAAQU,EACR9B,cAAeA,OCvDhBgD,MAPf,WACE,OAAO,sBAAKxC,UAAU,MAAf,2BACS,mBAAGyC,KAAK,iEAAR,2BACd,cAACtB,EAAD,QCDJuB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.11a5b4fe.chunk.js","sourcesContent":["import React, { useState } from \"react\"\nimport \"../styles/pixel.scss\"\n\nexport default function Pixel(props) {\n    const { selectedColor } = props;\n\n    const [pixelColor, setPixelColor] = useState(\"#fff\")\n    const [oldColor, setOldColor] = useState(pixelColor)\n    const [canChangeColor, setCanChangeColor] = useState(true)\n\n    function applyColor() {\n        setPixelColor(selectedColor);\n        setCanChangeColor(false);\n    }\n\n    function changeColorOnHover() {\n        setOldColor(pixelColor);\n        setPixelColor(selectedColor);\n    }\n\n    function resetColor() {\n        if(canChangeColor) {\n            setPixelColor(oldColor);\n        }\n        setCanChangeColor(true);\n    }\n\n\n    return <div \n                className=\"pixel\" \n                onClick={applyColor}\n                onMouseEnter={changeColorOnHover}\n                onMouseLeave={resetColor}\n                style={{ backgroundColor: pixelColor }}\n            ></div>\n}","import React from \"react\"\nimport \"../styles/row.scss\"\nimport Pixel from \"./Pixel\"\n\nexport default function Row(props) {\n    const { width, selectedColor } = props;\n\n    let pixels = [];\n\n    for (let i = 0; i < width; i++) {\n        pixels.push(<Pixel key={i} selectedColor={selectedColor} />)\n    }\n    \n    return <div className=\"row\">{pixels}</div>\n}","import React, {useRef} from \"react\"\nimport \"../styles/drawingPanel.scss\"\nimport Row from \"./Row\"\nimport { exportComponentAsPNG } from \"react-component-export-image\"\n\nexport default function DrawingPanel(props) {\n    const { width, height, selectedColor } = props;\n    const panelRef = useRef();\n    let rows = [];\n\n    for (let i = 0; i < height; i++) {\n        rows.push(<Row key={i} width={width} selectedColor={selectedColor} />);\n    }\n\n    return (\n    <div id=\"drawingPanel\">\n        <div id=\"pixels\"ref={panelRef}>\n            {rows}\n        </div>\n        <button onClick={() => exportComponentAsPNG(panelRef)} className=\"button\">\n            Export as PNG\n        </button>\n    </div>\n    )\n}","import React, { useState } from \"react\"\nimport \"../styles/editor.scss\"\nimport { CirclePicker } from \"react-color\"\nimport DrawingPanel from \"./DrawingPanel\"\n\nexport default function Editor() {\n    const [panelWidth, setPanelWidth] = useState(16)\n    const [panelHeight, setPanelHeight] = useState(16)\n    const [hideOptions, setHideOptions] = useState(false)\n    const [hideDrawingPanel, setHideDrawingPanel] = useState(true)\n    const [buttonText, setButtonText] = useState(\"start drawing\")\n    const [selectedColor, setColor] = useState(\"#f44336\")\n\n    function initializeDrawingPanel() {\n        setHideOptions(!hideOptions);\n        setHideDrawingPanel(!hideDrawingPanel)\n        \n        buttonText === \"start drawing\" ? setButtonText(\"reset\") : setButtonText(\"start drawing\");\n    }\n\n    function changeColor(color) {\n        setColor(color.hex);\n    }\n\n    return (\n        <div id=\"editor\">\n            <h1>Pixel Editor</h1>\n            {hideDrawingPanel && <h2>Enter Panel Dimensions</h2>}\n\n            {hideDrawingPanel && (<div id=\"options\">\n                <div className=\"option\">\n                    <input \n                        type=\"number\" \n                        className=\"panelInput\"\n                        defaultValue={panelWidth}\n                        onChange={(e) => {\n                            setPanelWidth(e.target.value);\n                        }}\n                    />\n                    <span>Width</span>\n                </div>\n                <div className=\"option\">\n                    <input \n                        type=\"number\" \n                        className=\"panelInput\"\n                        defaultValue={panelHeight}\n                        onChange={(e) => {\n                            setPanelHeight(e.target.value);\n                        }} \n                    />\n                    <span>Height</span>\n                </div>\n            </div>)}\n\n            <button onClick={initializeDrawingPanel} className=\"button\">\n                {buttonText}\n            </button>\n\n            {hideOptions && (\n                <CirclePicker color={selectedColor} onChangeComplete={changeColor} />\n            )}\n            {hideOptions && (\n            <DrawingPanel\n                width={panelWidth}\n                height={panelHeight}\n                selectedColor={selectedColor}\n            />)}\n        </div>\n    )\n}","import \"../styles/App.scss\";\nimport Editor from \"./Editor\"\n\nfunction App() {\n  return <div className=\"App\">\n    As teached by <a href=\"https://twitter.com/alekswritescode/status/1335249987823935488\">Aleks Popovic</a>\n    <Editor/>\n  </div>\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.scss\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}